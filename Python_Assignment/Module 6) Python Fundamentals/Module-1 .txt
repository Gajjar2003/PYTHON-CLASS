1. Introduction to Python

     1. Introduction to Python and its Features (simple, high-level, interpreted language)
         Python is a high-level, interpreted programming language that is widely used for web development,
         data science, artificial intelligence, automation, and many other applications. It was created by
         Guido van Rossum in 1991 with the idea of making programming simple, readable, and beginner-friendly

         Features of Python
      
              1.  Simple and Easy to Learn

                Python has a clean and readable syntax.

                Looks similar to English, which makes it beginner-friendly.

              2.  High-Level Language

                Programmers don’t need to worry about low-level details like memory management.

                It allows developers to focus on solving problems rather than managing hardware.

              3.  Interpreted Language

                Python code runs line by line using an interpreter.

                No need for compilation, which makes debugging easier.

             4.   Cross-Platform

                Python works on different operating systems like Windows, Mac, and Linux without changes in code.

              5.  Object-Oriented and Procedural

                Supports both object-oriented programming (classes, objects) and simple procedural programming.

              6. Extensive Standard Library

                Comes with built-in modules for math, file handling, networking, databases, etc.

                Also supports thousands of external libraries (like NumPy, Pandas, Django).

              7.  Free and Open Source

                Python is free to use and distribute, with a huge community of developers.

              8.  Dynamic Typing

                No need to declare variable types explicitly; Python decides the type at runtime.

              9.  Portable

                The same Python program can run on multiple platforms without modification.
   

     2. History and evolution of Python 
               1. Origin of Python

                Creator: Guido van Rossum (a Dutch programmer).

                Year: Late 1980s (development started in December 1989 at Centrum Wiskunde & Informatica (CWI), Netherlands).

                Inspiration: Guido wanted a simple, readable, and powerful language.

                Influenced by ABC language (a teaching language at CWI).

                Took features from C, Modula-3, and Unix Shell.

                Name: Python was named after the British comedy show “Monty Python’s Flying Circus”, not the snake.

                2. Early Releases

                1991: First official version Python 0.9.0 was released.

                Included: exception handling, functions, and core data types (str, list, dict).

                1994: Python 1.0 released.

                Features: lambda, map, filter, reduce.

                3. Python 2.x Series

                2000: Python 2.0 released.

                Introduced: list comprehensions, garbage collection (via reference counting + cycle-detecting GC).

                Widely adopted, but had design limitations.

                Python 2.x became very popular, but it had compatibility issues with the newer design.

                2020: Support for Python 2 officially ended (January 1, 2020).

                4. Python 3.x Series

                2008: Python 3.0 released (also called “Py3k”).

                Goal: remove design flaws, make language consistent.

                Major changes:

                print became a function (print()).

                Better Unicode support (default strings are Unicode).

                New syntax and standard library improvements.

                Current stable version (2025): Python 3.12 (released Oct 2023).

                Faster execution, pattern matching (match-case), improved error messages, and new performance optimizations.

                5. Evolution Timeline (Quick View)

                1989 – Python development started.

                1991 – Python 0.9.0 released.

                1994 – Python 1.0 released.

                2000 – Python 2.0 released.

                  2008 – Python 3.0 released.

                  2020 – End of Python 2 support.

                  2023 – Python 3.12 released.

                  Future: Python continues to evolve with a strong community and annual updates (3.13 expected in 2024).


     3.  Advantages of using Python over other programming languages.      
                       Advantages of Python
                        1. Simple and Easy to Learn

                        Python has a clean, readable, and English-like syntax.

                        Beginners can start coding quickly compared to languages like C++ or Java.

                        2. Cross-Platform and Open Source

                        Runs on Windows, macOS, Linux, Unix (and even mobile platforms).

                        Free and open source, with a huge community for support.

                        3. Extensive Libraries and Frameworks

                        Rich set of built-in libraries (math, os, datetime, etc.).

                        Thousands of external libraries/frameworks:

                        NumPy, Pandas, Matplotlib → Data Science

                        Django, Flask, FastAPI → Web Development

                        TensorFlow, PyTorch, Scikit-learn → Machine Learning & AI

                        Selenium, PyAutoGUI → Automation

                        4. Versatile and Multi-Purpose

                        Supports multiple programming paradigms:

                        Procedural

                        Object-Oriented

                        Functional

                        Used in web, AI, ML, data science, cybersecurity, game development, automation, IoT, and more.

                        5. Strong Community Support

                        One of the largest developer communities.

                        Easy to find tutorials, forums, Stack Overflow discussions, and open-source projects.

                        6. Rapid Development

                        Shorter code compared to Java, C++, or C#.

                        Faster prototyping and development cycle.

                        7. Excellent Integration

                        Works well with C, C++, Java, .NET, and databases like MySQL, MongoDB, PostgreSQL.

                        Good for embedding and extending applications.

                        8. Platform for Emerging Technologies

                        Python dominates in fields like:

                        Artificial Intelligence (AI)

                        Machine Learning (ML)

                        Data Science & Analytics

                        Robotics & IoT

                        Blockchain & Cybersecurity

                        9. Large Standard Library

                        Provides modules for file handling, networking, regular expressions, math, email, testing, etc., reducing the need to write code from scratch.

                        10. Productivity and Flexibility

                        Fewer lines of code → higher productivity.

                        Flexible enough to adapt to small scripts as well as large enterprise applications.     


     4.  Installing Python and setting up the development environment (Anaconda, PyCharm, or VS
        Code).              


         1. Installing Python

                Step 1: Visit the official website → https://www.python.org/downloads/

                Step 2: Download the latest version (Python 3.x).

                Step 3: During installation:

                ✅ Check “Add Python to PATH” option.

                Click Install Now.

                Step 4: Verify installation:
                Open Command Prompt / Terminal and type:

                python --version

                python3 --version

                2. Setting up Development Environment
                Option A: Using Anaconda (Best for Data Science & Machine Learning)

                What is Anaconda?
                A distribution of Python with pre-installed libraries like NumPy, Pandas, Jupyter Notebook.

                Steps:

                Download from https://www.anaconda.com
                .

                Install and open Anaconda Navigator.

                Use Jupyter Notebook or Spyder IDE for coding.

                Create virtual environments with:

                conda create -n myenv python=3.12
                conda activate myenv

                Option B: Using PyCharm (Best for Professional Development)

                What is PyCharm?
                A powerful IDE made by JetBrains, great for large projects.

                Steps:

                Download from https://www.jetbrains.com/pycharm/
                .

                Install Community Edition (free) or Professional Edition (paid).

                Create a new project → Choose interpreter (Python installed or Anaconda environment).

                Start coding with features like debugging, code completion, and Git integration.

                Option C: Using VS Code (Lightweight and Popular)

                What is VS Code?
                A free, lightweight editor by Microsoft with Python extensions.

                Steps:

                Download from https://code.visualstudio.com/
                .

                Install and open VS Code.

                Go to Extensions → Install Python Extension (by Microsoft).

                Select Python interpreter:

                Press Ctrl+Shift+P → “Python: Select Interpreter”.

                Create and run .py files easily.

                3. Testing Setup

                Create a file hello.py:

                print("Hello, Python is ready!")     


     5. Writing and executing your first Python program    
             Writing and Executing Your First Python Program
              1. Writing Your First Program

              Create a simple Python program that prints a message.

              Code (hello.py):

              print("Hello, World!")

              2. Executing the Program
              Option A: Using Command Line / Terminal

              Open Command Prompt (Windows) or Terminal (Linux/Mac).

              Navigate to the folder where your file is saved:

              cd path/to/your/folder


              Run the program:

              python hello.py


              or (sometimes required on Linux/Mac):

              python3 hello.py


              ✅ Output:

              Hello, World!

              Option B: Using IDLE (Python’s Built-in IDE)

              Open IDLE (installed with Python).

              Create a new file → write the code → save it as hello.py.

              Press F5 or go to Run → Run Module.

              See the output in the IDLE shell.

              Option C: Using VS Code

              Open VS Code.

              Create a new file → hello.py.

              Write the code:

              print("Hello, World!")


              Right-click → Run Python File in Terminal.

              Output will appear at the bottom terminal.

              Option D: Using PyCharm

              Open PyCharm → Create New Project.

              Add a new Python file hello.py.

              Write the code.

              Click the green Run button ▶️.

              Output appears in the Run window.

              Option E: Using Jupyter Notebook (Anaconda)

              Open Anaconda Navigator → Launch Jupyter Notebook.

              Create a new notebook.

              In a cell, type:

              print("Hello, World!")
 -----------------------------------------------------------------------------------------------------------------------------------------------                     
 
 2. Programming Style    
  
  1. Understanding Python’s PEP 8 guidelines.   
          What is PEP 8?

          PEP = Python Enhancement Proposal.

          PEP 8 = A style guide for writing clean, readable, and consistent Python code.

          Written by Guido van Rossum, Barry Warsaw, and Nick Coghlan.

          Purpose: To make Python code look consistent and easy to read for everyone in the community.

          2. Key PEP 8 Guidelines
          A. Code Layout

          Use 4 spaces for indentation (not tabs).

          Maximum line length: 79 characters.

          Blank lines:

          2 blank lines before class and function definitions.

          1 blank line between methods inside a class.

          Why Follow PEP 8?

          ✅ Improves readability of code.
          ✅ Makes collaboration easier in teams.
          ✅ Keeps style consistent across projects.
          ✅ Increases professional quality of your code.

          4. Tools to Check PEP 8

          flake8 → Code style checker.

          pylint → Checks errors & style issues.

          black → Auto-formats code to follow PEP 8.

   2.Indentation, comments, and naming conventions in Python

     1. Indentation in Python

          Indentation = Spaces at the beginning of a line.

          In Python, indentation is mandatory (it defines code blocks).

          Standard practice: 4 spaces per indentation level.

          Tabs are discouraged (use spaces for consistency).

         

          # Correct indentation
          if True:
              print("Hello")
              print("Python")
   
     2. Comments in Python

                Comments are used to explain code and are ignored by the interpreter.

                Types of Comments

                Single-line comment: starts with #

                # This is a single-line comment
                print("Hello, World!")  # Inline comment


                Multi-line comment:
                Use # on each line OR use triple quotes (""" """ or ''' ''')

                """
                This is a multi-line comment.
                It explains the program.
                """
                print("Python is fun!")

     3. Naming Conventions in Python (PEP 8 Guidelines)
                A. Variables and Functions

                Use lowercase_with_underscores.

                student_name = "Jenil"
                total_marks = 95
                def calculate_average(marks):
                    return sum(marks) / len(marks)

                B. Constants

                Use UPPERCASE_WITH_UNDERSCORES.

                PI = 3.14159
                MAX_LIMIT = 1000     


    4.  Writing readable and maintainable code.

    Writing Readable and Maintainable Code in Python
                    1. Follow Consistent Style (PEP 8)

                    Use 4 spaces for indentation.

                    Keep line length ≤ 79 characters.

                    Use proper naming conventions:

                    Variables/Functions → snake_case

                    Classes → CamelCase

                    Constants → UPPER_CASE

                    ✅ Example:

                    # Good
                    student_name = "Jenil"
                    MAX_LIMIT = 100

                    class StudentRecord:
                        pass

                    2. Use Meaningful Names

                    Use descriptive names instead of short or unclear ones.

                    ❌ Bad:

                    a = 100
                    b = 200
                    c = a + b


                    ✅ Good:

                    price = 100
                    tax = 200
                    total_cost = price + tax

                    3. Write Comments and Docstrings

                    Explain why you’re doing something, not just what.

                    Use docstrings (""" """") to describe functions and classes.

                    ✅ Example:

                    def calculate_area(radius):
                        """Return the area of a circle given its radius."""
                        PI = 3.14159
                        return PI * (radius ** 2)

                    4. Keep Code Simple and Modular

                    Break large code into functions and modules.

                    Follow DRY principle (Don’t Repeat Yourself).

                    ❌ Bad (repeated code):

                    print(10*10*3.14159)
                    print(5*5*3.14159)


                    ✅ Good (use function):

                    def calculate_area(radius):
                        PI = 3.14159
                        return PI * (radius ** 2)

                    print(calculate_area(10))
                    print(calculate_area(5))

                    5. Handle Errors Gracefully

                    Use try-except to manage errors.

                    ✅ Example:

                    try:
                        number = int(input("Enter a number: "))
                        print("You entered:", number)
                    except ValueError:
                        print("Invalid input! Please enter a number.")

                    6. Organize Code Structure

                    Group related files into packages/modules.

                    Follow a clear folder structure (e.g., src/, tests/, docs/).

                    7. Use Tools for Clean Code

                    linters (flake8, pylint) → check for style & errors.

                    formatters (black, autopep8) → auto-fix formatting.

                    type hints for clarity:

                    def greet(name: str) -> str:
                        return f"Hello, {name}"

--------------------------------------------------------------------------------------------------------------------                                      